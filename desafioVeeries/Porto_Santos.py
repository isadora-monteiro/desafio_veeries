{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1R2WFKQdUENkj6b_8r3uVZn90conuv0dw","timestamp":1702927234521},{"file_id":"1HdJ8Xba93NWPYhkHQj61qvmxVR2N9HdE","timestamp":1702925864015},{"file_id":"13ZYRGtLkmCrQK01FVSCuGJQIlYFCiG4I","timestamp":1702762974881},{"file_id":"1zES1NG98miaVfyyTrfC4utHcH5BGrTo0","timestamp":1702761487602}],"mount_file_id":"1D__d78pejpwJTxhTnH8GuAinoRQ72QBF","authorship_tag":"ABX9TyMnc8XOOm8TkldFjzjnJXol"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import re\n","import io\n","import requests\n","import numpy as np\n","import pandas as pd\n","from bs4 import BeautifulSoup\n","from datetime import datetime"],"metadata":{"id":"AEJxxFhUUz6g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"wMNtTMNhg92t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def WebScraping(url, tag_html, class_html):\n","\n","    # requisição html\n","    response = requests.get(url)\n","\n","    # Verifica solicitação bem-sucedida\n","    if response.status_code == 200:\n","\n","        # Cria um objeto BeautifulSoup para analisar o HTML\n","        soup = BeautifulSoup(response.content, 'html.parser')\n","        # Encontra tabelas na página html\n","        tables = soup.find_all(tag_html,  id=tag_id)\n","\n","        return tables\n","    else:\n","        print(f\"Erro ao obter a página. Código de status: {response.status_code}\")"],"metadata":{"id":"o6uJ23XqU1cz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def FormataDataFrame(df):\n","\n","    try:\n","\n","        # salva o nome do dataframe\n","        df_name = df.columns.get_level_values(0)[0]\n","        # gera o conteúdo da coluna Tabela_origem\n","        col_name_table = [df_name] * len(df)\n","        # elimina a coluna multindex\n","        df = df.droplevel(level=0, axis=1)\n","        # insere a coluna Tabela_origem no dataframe\n","        df['Tabela_origem'] = col_name_table\n","        # filtrar colunas de interesse\n","        columns = ['Cheg/Arrival d/m/y', 'Operaç Operat', 'Mercadoria Goods', 'Peso Weight', 'Tabela_origem']\n","        df = df[columns]\n","        df = df.copy()\n","\n","    except KeyError as error:\n","        pass\n","\n","    else:\n","\n","        ## LIMPAR DATAFRAME POR COLUNAS\n","\n","        # Iterar sobre as colunas\n","        for coluna in df.columns:\n","\n","            # garantir que toda coluna é string\n","            df[coluna] = df[coluna].astype(str)\n","            # Excluir strings duplicadas dentro dos campos\n","            df[coluna] = df[coluna].apply(lambda x: ' '.join(set(x.split())))\n","            # Exclui espaços em branco e preenche valores vazios\n","            df[coluna] = df[coluna].str\\\n","                                    .strip()\\\n","                                    .fillna(\"0,0\")\n","\n","        ## TRATAR COLUNA OPERAÇÃO\n","\n","        # Dividir as strings das colunas Operação\n","        df['Operaç Operat'] = df['Operaç Operat'].str.split()\n","        # Explodir as linhas de Operação em Embarque e Desembarque\n","        df = df.explode('Operaç Operat')\n","\n","\n","        ## TRATAR COLUNA PESO\n","\n","        for i, row in df.iterrows():\n","\n","            campo_oper = row['Operaç Operat']\n","            string = row['Peso Weight']\n","            sbstring = row['Peso Weight'].split()\n","\n","            # Se o tamanho do campo for maior que 1\n","            if len(sbstring) > 1 :\n","\n","              # salva cada valor numa variavel\n","              str_emb = sbstring[0:1]\n","              str_desc = sbstring[1:2]\n","\n","              # Se for embarque\n","              if (campo_oper == 'EMB'):\n","                # Substituir o valor\n","                string_atual = row['Peso Weight'].replace(string, str(str_emb))\n","                # Substirui caracteres por vazio mantendo a string atual\n","                row['Peso Weight'] = re.sub('\\D', '', string_atual)\n","\n","              # Se for desembarque\n","              if (campo_oper == 'DESC'):\n","                # Substituir o valor\n","                string_atual = row['Peso Weight'].replace(string, str(str_desc))\n","                row['Peso Weight'] = re.sub('\\D', '', string_atual)\n","\n","        # Resetar os índices\n","        df.reset_index(drop=True, inplace=True)\n","\n","        # Converter coluna para tipo float\n","        df['Peso Weight'] = df['Peso Weight'].astype(float)\n","\n","\n","        ## TRATAR COLUNA CHEGADA\n","\n","        # Converter a coluna 'Data' para datetime\n","        df['Cheg/Arrival d/m/y'] = pd.to_datetime(df['Cheg/Arrival d/m/y'], dayfirst=True)\n","        # Formatando a coluna 'Data' para o novo formato 'yyyyMMdd'\n","        df['Cheg/Arrival d/m/y'] = df['Cheg/Arrival d/m/y'].dt.strftime('%Y%m%d')\n","\n","\n","        ## ESTRUTURAR O DATAFRAME\n","\n","        columns = ['Cheg/Arrival d/m/y', 'Operaç Operat', 'Mercadoria Goods', 'Peso Weight', 'Tabela_origem']\n","\n","        df_form = df[columns].groupby(['Mercadoria Goods', 'Operaç Operat', 'Tabela_origem', 'Cheg/Arrival d/m/y'])['Peso Weight'].sum().reset_index()\n","        df_form = df_form.sort_values(by='Cheg/Arrival d/m/y')\n","\n","        return df_form"],"metadata":{"id":"Q-uk_VrQXFQ2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def GeraDataFrames(url, tag_html, class_html):\n","\n","    # EXTRAI AS TABELAS DO SITE\n","    tables = WebScraping(url, tag_html, class_html)\n","\n","\n","    dfs = []\n","    for table in tables:\n","\n","        # CONVERTE A TABELA EM UM DATAFRAME\n","        df = pd.read_html(str(table))[0]\n","\n","        # FORMATA O DATAFRAME\n","        df_form = FormataDataFrame(df)\n","\n","        # ADICIONA O DATAFRAME À LISTA\n","        dfs.append(df_form)\n","        # elimina dfs nulos\n","        dfs = [df for df in dfs if df is not None]\n","\n","\n","    # JUNTA TODOS OS DATAFRAMES\n","    dfs_join = pd.concat(dfs).reset_index().drop(['index'], axis=1)\n","\n","    # RENOMEIA AS COLUNAS\n","    names_col = {'Mercadoria Goods' : 'Mercadoria', 'Operaç Operat' : 'Sentido', 'Tabela_origem' : 'Tabela_origem', 'Cheg/Arrival d/m/y' : 'Chegada', 'Peso Weight' : 'Previsto'}\n","    dfs_join.rename(columns = names_col, inplace = True)\n","\n","    # RETORNA O DATAFRAME\n","    return dfs_join\n","\n"],"metadata":{"id":"q3xpNFzWVVhz"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-VXyOEmsULk4","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1702933242475,"user_tz":180,"elapsed":4369,"user":{"displayName":"Isadora Monteiro","userId":"05103505597007238469"}},"outputId":"6dc4a20e-a689-44c3-c461-dfeae8ca3343"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                              Mercadoria Sentido     Tabela_origem   Chegada  \\\n","0                            DIESEL OLEO    DESC  LIQUIDO GRANEL A  20231204   \n","1               NAO GRAN.LIQUIDO ESPECIF     EMB  LIQUIDO GRANEL A  20231208   \n","2                      LUBRIFICANTE OLEO     EMB  LIQUIDO GRANEL A  20231209   \n","3                      LUBRIFICANTE OLEO    DESC  LIQUIDO GRANEL A  20231209   \n","4               NAO GRAN.LIQUIDO ESPECIF    DESC  LIQUIDO GRANEL A  20231212   \n","..                                   ...     ...               ...       ...   \n","204  E CONTEINERES CELULOSE PAPEL VAZIOS     EMB    PRIORIDADE SEM  20231224   \n","205  E CONTEINERES CELULOSE PAPEL VAZIOS    DESC    PRIORIDADE SEM  20231224   \n","206                     E PAPEL CELULOSE     EMB    PRIORIDADE SEM  20231228   \n","207  BORDO CHEIOS CONTEINERES DE CONSUMO     EMB    PRIORIDADE SEM  20240101   \n","208  BORDO CHEIOS CONTEINERES DE CONSUMO    DESC    PRIORIDADE SEM  20240101   \n","\n","     Previsto  \n","0     56262.0  \n","1      3750.0  \n","2     20500.0  \n","3      3250.0  \n","4     10385.0  \n","..        ...  \n","204   57000.0  \n","205     660.0  \n","206   23600.0  \n","207    4266.0  \n","208   64170.0  \n","\n","[209 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-51d01d48-7f3a-41c3-a1a4-4a22df0ef72a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Mercadoria</th>\n","      <th>Sentido</th>\n","      <th>Tabela_origem</th>\n","      <th>Chegada</th>\n","      <th>Previsto</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>DIESEL OLEO</td>\n","      <td>DESC</td>\n","      <td>LIQUIDO GRANEL A</td>\n","      <td>20231204</td>\n","      <td>56262.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>NAO GRAN.LIQUIDO ESPECIF</td>\n","      <td>EMB</td>\n","      <td>LIQUIDO GRANEL A</td>\n","      <td>20231208</td>\n","      <td>3750.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>LUBRIFICANTE OLEO</td>\n","      <td>EMB</td>\n","      <td>LIQUIDO GRANEL A</td>\n","      <td>20231209</td>\n","      <td>20500.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>LUBRIFICANTE OLEO</td>\n","      <td>DESC</td>\n","      <td>LIQUIDO GRANEL A</td>\n","      <td>20231209</td>\n","      <td>3250.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>NAO GRAN.LIQUIDO ESPECIF</td>\n","      <td>DESC</td>\n","      <td>LIQUIDO GRANEL A</td>\n","      <td>20231212</td>\n","      <td>10385.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>204</th>\n","      <td>E CONTEINERES CELULOSE PAPEL VAZIOS</td>\n","      <td>EMB</td>\n","      <td>PRIORIDADE SEM</td>\n","      <td>20231224</td>\n","      <td>57000.0</td>\n","    </tr>\n","    <tr>\n","      <th>205</th>\n","      <td>E CONTEINERES CELULOSE PAPEL VAZIOS</td>\n","      <td>DESC</td>\n","      <td>PRIORIDADE SEM</td>\n","      <td>20231224</td>\n","      <td>660.0</td>\n","    </tr>\n","    <tr>\n","      <th>206</th>\n","      <td>E PAPEL CELULOSE</td>\n","      <td>EMB</td>\n","      <td>PRIORIDADE SEM</td>\n","      <td>20231228</td>\n","      <td>23600.0</td>\n","    </tr>\n","    <tr>\n","      <th>207</th>\n","      <td>BORDO CHEIOS CONTEINERES DE CONSUMO</td>\n","      <td>EMB</td>\n","      <td>PRIORIDADE SEM</td>\n","      <td>20240101</td>\n","      <td>4266.0</td>\n","    </tr>\n","    <tr>\n","      <th>208</th>\n","      <td>BORDO CHEIOS CONTEINERES DE CONSUMO</td>\n","      <td>DESC</td>\n","      <td>PRIORIDADE SEM</td>\n","      <td>20240101</td>\n","      <td>64170.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>209 rows × 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-51d01d48-7f3a-41c3-a1a4-4a22df0ef72a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-51d01d48-7f3a-41c3-a1a4-4a22df0ef72a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-51d01d48-7f3a-41c3-a1a4-4a22df0ef72a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-694b254f-1e98-40f1-a61d-15f7d85cdbef\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-694b254f-1e98-40f1-a61d-15f7d85cdbef')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-694b254f-1e98-40f1-a61d-15f7d85cdbef button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_566ada30-b61e-4251-889e-5c2221747fda\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_porto_santos')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_566ada30-b61e-4251-889e-5c2221747fda button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_porto_santos');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":245}],"source":["# PARÂMETROS\n","url = 'https://www.portodesantos.com.br/informacoes-operacionais/operacoes-portuarias/navegacao-e-movimento-de-navios/navios-esperados-carga/'\n","tag_html = \"table\"\n","tag_id = 'esperados'\n","\n","\n","# EXECUTA A FUNÇÃO\n","df_porto_santos = GeraDataFrames(url, tag_html, tag_id)\n","\n","# MOSTRA O DATAFRAME\n","df_porto_santos"]},{"cell_type":"code","source":["# SALVA ARQUIVO\n","df_porto_santos.to_csv('/content/drive/MyDrive/desafioVeeries/lineup_porto_santos.csv',\n","    mode= 'x',\n","    sep= ';',\n","    decimal= '.',\n","    header= True\n",")\n","\n"],"metadata":{"id":"qJQNiX5nUO3N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"UPU6J0SmUPH8"},"execution_count":null,"outputs":[]}]}